// Copyright (c) 2016 Electronic Theatre Controls, Inc., http://www.etcconnect.com
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef OUTPUTMANAGER_H
#define OUTPUTMANAGER_H

#include <QObject>
#include <QVector>

#include <cstdint>

#include "ArtNetDiscoveryManager.h"
#include "ArtNetSender.h"
#include "BasicSAcnSender.h"
#include "utils.h"

// forward declaration:
class MainController;


class OutputManager : public QObject
{
	Q_OBJECT

    Q_PROPERTY(bool sAcnEnabled READ getSAcnEnabled WRITE setSAcnEnabled NOTIFY sAcnEnabledChanged)
    Q_PROPERTY(bool artnetEnabled READ getArtnetEnabled WRITE setArtnetEnabled NOTIFY artnetEnabledChanged)
    Q_PROPERTY(int sAcnStartUniverse READ getSAcnStartUniverse WRITE setSAcnStartUniverse NOTIFY sAcnStartUniverseChanged)
    Q_PROPERTY(int sAcnPriority READ getSAcnPriority WRITE setSAcnPriority NOTIFY sAcnPriorityChanged)
    Q_PROPERTY(int artnetNet READ getArtnetNet WRITE setArtnetNet NOTIFY artnetNetChanged)
    Q_PROPERTY(int artnetSubnet READ getArtnetSubnet WRITE setArtnetSubnet NOTIFY artnetSubnetChanged)
    Q_PROPERTY(bool broadcastArtnet READ getBroadcastArtnet WRITE setBroadcastArtnet NOTIFY broadcastArtnetChanged)

    Q_PROPERTY(QVariantList discoveredNodes READ getDiscoveredNodes NOTIFY discoveredNodesChanged)
    Q_PROPERTY(QVariantList luminosusInstances READ getDiscoveredLuminosusInstances NOTIFY discoveredNodesChanged)

public:
    OutputManager(MainController* controller);

    /**
     * @brief getState returns the settings of this manager to persist them
     * @return the settings as a QJsonObject
     */
    QJsonObject getState() const;

    /**
     * @brief setState restores the settings from a saved Json object
     * @param state a QJsonObject previously generated by getState()
     */
    void setState(const QJsonObject& state);

signals:
    void sAcnEnabledChanged();
    void artnetEnabledChanged();
    void sAcnStartUniverseChanged();
    void sAcnPriorityChanged();
    void artnetNetChanged();
    void artnetSubnetChanged();
    void broadcastArtnetChanged();
    void discoveredNodesChanged();


public slots:
    void setChannel(int address, double value);
    void triggerOutput();
    int getUnusedAddress(int footprint);
    void setNextAddressToUse(int address);

    bool getSAcnEnabled() const { return m_sAcnEnabled; }
    void setSAcnEnabled(bool value) { m_sAcnEnabled = value; emit sAcnEnabledChanged(); }

    bool getArtnetEnabled() const { return m_artnetEnabled; }
    void setArtnetEnabled(bool value) { m_artnetEnabled = value; emit artnetEnabledChanged(); }

    int getSAcnStartUniverse() const { return m_sAcnStartUniverse; }
    void setSAcnStartUniverse(int value);

    int getSAcnPriority() const { return m_sAcnPriority; }
    void setSAcnPriority(int value);

    int getArtnetNet() const { return m_artnetNet; }
    void setArtnetNet(int value);

    int getArtnetSubnet() const { return m_artnetSubnet; }
    void setArtnetSubnet(int value);

    bool getBroadcastArtnet() const { return m_broadcastArtnet; }
    void setBroadcastArtnet(bool value) { m_broadcastArtnet = value; emit broadcastArtnetChanged(); }

    QVariantList getDiscoveredNodes();
    QVariantList getDiscoveredLuminosusInstances();

protected:
    bool m_sAcnEnabled;
    bool m_artnetEnabled;
    int m_sAcnStartUniverse;
    int m_sAcnPriority;
    int m_artnetNet;
    int m_artnetSubnet;
    bool m_broadcastArtnet;

    ArtNetSubnetSender m_artnet;
    //ArtNetDiscoveryManager m_artnetDiscoveryManager;
    SAcnSender m_sAcnSender;
    QVector<QVector<uint8_t>> m_universes;
    bool m_universeDirty[16];
    int m_usedAddressCount;
    int m_nextAddressToUse;
};

#endif // OUTPUTMANAGER_H

